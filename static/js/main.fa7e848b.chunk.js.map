{"version":3,"sources":["useViewCounter.hook.js","App.js","serviceWorker.js","index.js"],"names":["useViewCounter","useState","views","setViews","slug","pathname","window","location","charAt","substring","getSlug","useEffect","fetch","mode","then","res","json","totalViews","catch","err","console","error","message","App","undefined","initialData","setInitialData","currentSheet","setCurrentSheet","generatedObjects","setGeneratedObjects","className","type","accept","onChange","event","file","target","files","readFile","readedData","id","style","display","htmlFor","onClick","document","getElementById","click","onSheetUpdate","activeSheetClassName","reactExcelClassName","result","generateObjects","length","cols","rows","value","JSON","stringify","readOnly","Boolean","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAgCeA,G,MA/BQ,WAAO,IAAD,EACDC,mBAAS,MADR,mBACpBC,EADoB,KACbC,EADa,KAWrBC,EARU,WACd,IAAIC,EAAWC,OAAOC,SAASF,SAI/B,MAH2B,MAAvBA,EAASG,OAAO,KAClBH,EAAWA,EAASI,UAAU,IAEzBJ,EAGIK,GAiBb,OAfAC,qBAAU,WAMRC,MAAM,sDAAD,OAAuDR,GAAQ,CAClES,KAAM,YAELC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACE,GACLb,EAASa,EAAKC,eAEfC,OAAM,SAACC,GAAD,OAASC,QAAQC,MAAMF,EAAIG,cACnC,CAAClB,IACG,CAAEF,WCoCIqB,EA5DH,WAAO,IAAD,EACsBtB,wBAASuB,GAD/B,mBACTC,EADS,KACIC,EADJ,OAEwBzB,mBAAS,IAFjC,mBAET0B,EAFS,KAEKC,EAFL,OAGgC3B,mBAAS,IAHzC,mBAGT4B,EAHS,KAGSC,EAHT,KAmBhB,OAFA9B,IAGE,yBAAK+B,UAAU,OACb,2BACEC,KAAK,OACLC,OAAO,QACPC,SAnBe,SAACC,GACpB,IAAMC,EAAOD,EAAME,OAAOC,MAAM,GAChCC,YAASH,GACNtB,MAAK,SAAC0B,GAAD,OAAgBd,EAAec,MACpCtB,OAAM,SAACG,GAAD,OAAWD,QAAQC,MAAMA,OAgB9BoB,GAAG,SACHC,MAAO,CAAEC,QAAS,UAEpB,2BAAOC,QAAQ,UACb,4BACEb,UAAU,gBACVc,QAAS,kBAAMC,SAASC,eAAe,UAAUC,UAFnD,WAOF,kBAAC,IAAD,CACEvB,YAAaA,EACbwB,cAAe,SAACtB,GAAD,OAAkBC,EAAgBD,IACjDuB,qBAAqB,GACrBC,oBAAoB,gBAErB1B,GACC,4BAAQM,UAAU,gBAAgBc,QA/BpB,WAClB,IAAMO,EAASC,YAAgB1B,GAC/BG,EAAoBsB,KA6BhB,aAIDvB,EAAiByB,OAAS,GACzB,8BACEC,KAAM,GACNC,KAAM,GACNC,MAAOC,KAAKC,UAAU9B,EAAkB,KAAM,GAC9C+B,UAAQ,EACR7B,UAAU,gBC9CA8B,QACW,cAA7BvD,OAAOC,SAASuD,UAEe,UAA7BxD,OAAOC,SAASuD,UAEhBxD,OAAOC,SAASuD,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpB,SAASC,eAAe,SDyHpB,kBAAmBoB,WACrBA,UAAUC,cAAcC,MACrBvD,MAAK,SAAAwD,GACJA,EAAaC,gBAEdrD,OAAM,SAAAG,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.fa7e848b.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\nconst useViewCounter = () => {\n  const [views, setViews] = useState(null);\n\n  const getSlug = () => {\n    let pathname = window.location.pathname;\n    if (pathname.charAt(0) === '/') {\n      pathname = pathname.substring(1);\n    }\n    return pathname;\n  };\n\n  const slug = getSlug();\n\n  useEffect(() => {\n    // Don't count views on localhost\n    if (process.env.NODE_ENV !== 'production') {\n      return;\n    }\n\n    fetch(`https://my-projects-dashboard.vercel.app/api/views/${slug}`, {\n      mode: 'no-cors'\n    })\n      .then((res) => res.json())\n      .then((json) => {\n        setViews(json.totalViews);\n      })\n      .catch((err) => console.error(err.message));\n  }, [slug]);\n  return { views };\n};\n\nexport default useViewCounter;\n","import React, { useState } from 'react';\nimport { ReactExcel, readFile, generateObjects } from '@ramonak/react-excel';\nimport './App.css';\nimport useViewCounter from './useViewCounter.hook';\n\nconst App = () => {\n  const [initialData, setInitialData] = useState(undefined);\n  const [currentSheet, setCurrentSheet] = useState({});\n  const [generatedObjects, setGeneratedObjects] = useState([]);\n\n  const handleUpload = (event) => {\n    const file = event.target.files[0];\n    readFile(file)\n      .then((readedData) => setInitialData(readedData))\n      .catch((error) => console.error(error));\n  };\n\n  const handleClick = () => {\n    const result = generateObjects(currentSheet);\n    setGeneratedObjects(result);\n  };\n\n  useViewCounter();\n\n  return (\n    <div className='App'>\n      <input\n        type='file'\n        accept='.xlsx'\n        onChange={handleUpload}\n        id='upload'\n        style={{ display: 'none' }}\n      />\n      <label htmlFor='upload'>\n        <button\n          className='custom-button'\n          onClick={() => document.getElementById('upload').click()}\n        >\n          Upload\n        </button>\n      </label>\n      <ReactExcel\n        initialData={initialData}\n        onSheetUpdate={(currentSheet) => setCurrentSheet(currentSheet)}\n        activeSheetClassName=''\n        reactExcelClassName='react-excel'\n      />\n      {initialData && (\n        <button className='custom-button' onClick={handleClick}>\n          Transform\n        </button>\n      )}\n      {generatedObjects.length > 0 && (\n        <textarea\n          cols={70}\n          rows={30}\n          value={JSON.stringify(generatedObjects, null, 2)}\n          readOnly\n          className='text-area'\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}